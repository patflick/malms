inputfile <- "../../data/growing_k.csv"
outputfile <- "../../plots/paper/growing_k.png"
outputwidth <- 1200
outputheight <- 800
textsize <- 4

data <- read.csv(inputfile,header=TRUE,sep=";")

trimmedmean <- function(x) {
	return <- mean(x, trim=0.10)
	#return <- mean(x)
}

datamean <- aggregate(data,by=list(data$Cores,data$Workpakets,data$Input.Size),FUN=trimmedmean)

inputsizes <- unique(datamean$Input.Size)
cores <- unique(datamean$Cores)
wps <- unique(datamean$Workpakets)

# create output png
png(outputfile,width=outputwidth,height=outputheight)

# plot running time while cores are blocked
size = 1000000
par(cex=2.0)
plotdata <- datamean[which(datamean$Input.Size == size),]
x <- wps
malms <- plotdata$Time.MALMS
plot(NaN,xlim=c(min(x),max(x)),ylim=c(min(0),max(malms)),xlab="Workpackets k",ylab="Abs Time",main="Running time with growing k")


xx <- c(wps, rev(wps))
sort <- plotdata$Time.Sorting
merge <- plotdata$Time.Merging+plotdata$Time.Sorting
split <- plotdata$Time.Merging+plotdata$Time.Splitting+plotdata$Time.Sorting


yySort <- c(sort, rep(0,length(x)))
yyMerge <- c(merge, rev(sort))
yySplit <- c(split, rev(merge))
yyTotal <- c(malms, rev(split))

polygon(xx,yyTotal, col="grey")
polygon(xx,yySplit, col="#FFA200",density=8,lwd=5,angle=90)
polygon(xx,yyMerge, col="#00BB3F",density=8,lwd=5,angle=45)
polygon(xx,yySort, col="#7309AA",density=8,lwd=5,angle=-45)

legend("topleft", title="Phases", c("Init Scheduler","Splitting","Merging", "Sorting"),fill=c("grey","#FFA200","#00BB3F", "#7309AA"),density=c(NaN,15,15,15),angle=c(NaN,90,45,-45))
#lines(x,malms,col="blue",type="o")

dev.off()

