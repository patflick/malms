inputfile <- "../data/dynload_new_100µs_wp48_noinfo.csv"
inputfile_noinfo <- "../data/dynload_noinfo_50µs_wp100.csv"
data <- read.csv(inputfile,header=TRUE,sep=";")
data_noinfo <- read.csv(inputfile_noinfo,header=TRUE,sep=";")

trimmedmean <- function(x) {
	#return <- mean(x, trim=0.10)
	return <- mean(x)
}

datamean <- aggregate(data,by=list(data$Cores,data$Workpakets,data$Input.Size),FUN=trimmedmean)
datamean_noinfo <- aggregate(data_noinfo,by=list(data_noinfo$Cores,data_noinfo$Workpakets,data_noinfo$Input.Size),FUN=trimmedmean)

inputsizes <- unique(datamean$Input.Size)

str <- "Input Size	& MALMS		& MALMS NoInfo	& MCSTL		& ww MALMS	& ww MCSTL & MALMS Info Adv	& MCSTL Adv		\\\\\n\\hline\n"
for (size in inputsizes) {
	data <- datamean[which(datamean$Input.Size == size),]
	data_noinfo <- datamean_noinfo[which(datamean_noinfo$Input.Size == size),]
	# input size
	str <- paste(c(str, "$10^",log(size,base=10),"$		& "),collapse="")
	# execution times
	str <- paste(c(str, round(data$Time,digits=6), "	& "),collapse="")
	str <- paste(c(str, round(data_noinfo$Time,digits=6), "	& "),collapse="")
	str <- paste(c(str, round(data$Time.MCSTL,digits=6), "	& "),collapse="")
	
	# loops while algos
	str <- paste(c(str, round(data$Loops.MALMS/1000000/data$Time,digits=6), "	& "),collapse="")
	str <- paste(c(str, round(data$Loops.MCSTL/1000000/data$Time.MCSTL,digits=6), "	& "),collapse="")
	
	# advantages in %
	str <- paste(c(str, round(100-data$Time*100/data_noinfo$Time,digits=1), "\\%	& "),collapse="")	
	str <- paste(c(str, round(100-data$Time.MCSTL*100/data$Time,digits=1), "\\% \\\\\n"),collapse="")

}
writeLines(str)
